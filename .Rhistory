## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite()
mat5=matrix(c('A','C','A','T','G'),nrow=10, ncol=42, byrow=T)
mat5[1,]
length(mat5[1,])
mat5='G'
mat5=='G'
mat5=matrix(c('A','C','A','T','G'),nrow=10, ncol=42, byrow=T)
mat5=='G'
length(mat5=='G')
mat5=matrix(c('A','C','A','T','G'),nrow=10, ncol=42, byrow=T)
mat5=='G'
length(mat[mat5=='G'])
length(mat5[mat5=='G'])
length(mat5[mat5=='A'])
rep(c('T','F','T','F'),3)
length(rep(c('T','F','T','F'),3))
library("abd", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
sequence='ACGTTGATA'
length(sequence)
sequence=c('A','C','G','T','T','G','A','T','A')
length(sequence)
sequence=c('A','C','G','C',T','T','G','A','T','A')
sequence=c('A','C','G','C','T','T','G','A','T','A')
length(sequence)
library(ape)
install.packages("ape")
install.packages("raster")
x=0:5
x
plot(x,y)
y=0:5
plot(x,y)
x=0:4
y=4:0
plot(x,y)
x=0:5
y=0:5
plot(x,y)
abline(a=4,b=4)
abline(4,4)
abline()
abline(lm(y~x))
x=0:4
y=4:0
plot(x,y)
abline(lm(y~x))
y=5:0
x=0:5
abline(lm(y~x))
clear
clear
x=0:5
y=5:0
abline(4,4)
plot(x,y)
abline(4,4)
?abline
plot(x,y)
abline(4,-1)
y=4:0
x=0:4
plot(x,y)
abline(4,-1)
#load ape (analysis of phylogenetics and evolution)
library(ape)
tree <- rtree(n=20)
plot(tree, edge.width=2)
tree
#a cladogram doesn't have edge lengths
tree <- read.tree(text = "(((A,B),(C,D)),E);")
plot(tree, type = "cladogram", edge.width = 2)
tree$edge
setwd("~/")
gender<-c('female','male',
'male','female','male','male',
'female','male','female',
'female','male','male','male',
'male','male','female','female',
'female','female','male','female'
'female','male','male','male','female',
'female','male','male',
'male','female','male','female','female',
'male','female','female','female')
gender<-c('female','male',
'male','female','male','male',
'female','male','female',
'female','male','male','male',
'male','male','female','female',
'female','female','male','female',
'female','male','male','male','female',
'female','male','male',
'male','female','male','female','female',
'male','female','female','female')
str(gender)
table(gender)
plot(table(gender))
library(plotly)
library(ggplot2)
counts<-c(19,19)
genders<-c('Female','Male')
gendertable<-data.frame(genders,counts)
str(gendertable)
pie(gendertable[,2], labels=gendertable[,1],
col=c('Blue','Red'), main="Local Vendors by Gender")
pie(gendertable[,2], labels=gendertable[,1],
col=c('Blue','Red'))
library(ggplot2)
ggplot(gendertable, aes(x ="", y= counts, fill = genders)) +
geom_bar(width=1, stat='identity') +
coord_polar(theta=y, start=0)+
scale_fill_manual(values=c("Blue", "Red"))+ labs(x="", y="", title="Local vendors by Gender \n",
fill="Gender")+
theme(plot.title = element_text((hjust=0.5),
legend.title=element_text(hjust=0.5, face='bold', size=10)))
ggplot(gendertable, aes(x ="", y= counts, fill = genders)) +
geom_bar(width=1, stat='identity') +  coord_polar(theta=y, start=0)+
scale_fill_manual(values=c("Blue", "Red"))+ labs(x="", y="", title="Local vendors by Gender \n", fill="Gender")+
theme(plot.title = element_text((hjust=0.5), legend.title=element_text(hjust=0.5, face='bold', size=10)))
ggplot(gendertable, aes(x ="", y= counts, fill = genders)) +
geom_bar(width=1, stat='identity')
ggplot(gendertable, aes(x ="", y= counts, fill = genders)) +
geom_bar(width=1, stat='identity') +  coord_polar(theta=y, start=0)+
scale_fill_manual(values=c("Blue", "Red"))+ labs(x="", y="", title="Local vendors by Gender \n", fill="Gender")+
theme(plot.title = element_text((hjust=0.5), legend.title=element_text(hjust=0.5, face='bold', size=10)))
ggplot(gendertable, aes(x ="", y= counts, fill = genders)) +
geom_bar(width=1, stat='identity') +  coord_polar(theta=y, start=0)+
scale_fill_manual(values=c("Blue", "Red"))+ labs(x="", y="", title="Local vendors by Gender \n", fill="Gender")
+  theme(plot.title = element_text((hjust=0.5), legend.title=element_text(hjust=0.5, face='bold', size=10)))
ggplot(gendertable, aes(x ="", y= counts, fill = genders)) +
geom_bar(width=1, stat='identity') +  coord_polar(theta="y", start=0)+
scale_fill_manual(values=c("Blue", "Red"))+ labs(x="", y="", title="Local vendors by Gender \n", fill="Gender") +
theme(plot.title = element_text(hjust=0.5), legend.title=element_text(hjust=0.5, face="bold", size=10))
ggplot(gendertable, aes(x ="", y= counts, fill = genders)) +
geom_bar(width=1, stat='identity') +  coord_polar(theta="y", start=0)+
scale_fill_manual(values=c("Red", "Blue"))+ labs(x="", y="", title="Local vendors by Gender \n", fill="Gender") +
theme(plot.title = element_text(hjust=0.5), legend.title=element_text(hjust=0.5, face="bold", size=10))
comms<-c("Have_email", "No_email")
countcomms<-(10,28)
countcomms<-c(10,28)
emailcomms<-data.frame(comms,countcomms)
str(emailcomms)
plot(emailcomms)
plot(emailcomms$comms,emailcomms$countcomms)
barplot(emailcomms,col=c("blue","green"), main="Email communication")
barplot(table(emailcomms),col=c("blue","green"), main="Email communication")
barplot(emailcomms,col=c("blue","green"), main="Email communication")
barplot(emailcomms$countcomms,col=c("blue","green"), main="Email communication")
barplot(emailcomms$countcomms,col=c("blue","green"), main="Email communication",fill="email")
barplot(emailcomms$countcomms,col=c("blue","green"), main="Email communication",
horiz = TRUE, names.arg = c('Have email', 'No Email'))
barplot(emailcomms$countcomms,col=c("blue","green"), main="Email communication",
horiz = TRUE, names.arg = c("Have email", "No Email"))
tourists <- c('USA','Canada','Russia','Australia','German','Spain','France','England','India','China')
vendor1 <- c(1,1,1,1,1,1,0,0,1,1)
vendor2<-c(0,0,0,0,1,0,0,1,0,1)
vendor3<-c(0,0,0,0,1,0,1,0,0,0)
vendor4<-c(0,0,0,0,1,0,1,1,0,0)
vendor5 <- c(1,0,0,1,0,0,1,0,0,0)
ctable <- rbind(vendor1, vendor2, vendor3,vendor4,
vendor5)
colnames(ctable) <- tourists
# ctable is a matrix at the moment, with the rownames identifying vendors
ctable_df <- data.frame(ctable)
# ctable_df is now a data.frame.
# if you want area as a column in your data.frame (not just row.names)
CTABLE <- data.frame(vendorId= rownames(ctable_df), ctable_df, row.names = NULL)
challenge <-c(sum(CTABLE$USA),sum(CTABLE$Canada),sum(CTABLE$Russia),
sum(CTABLE$Australia),sum(CTABLE$Australia),sum(CTABLE$Spain),sum(CTABLE$France),sum(CTABLE$England),
sum(CTABLE$India),sum(CTABLE$China))
barplot(challenge, names.arg=torists, main="Countries of visiting Tourists",col=c("brown","green","grey","blue","yellow"))
tourists <- c('USA','Canada','Russia','Australia','German','Spain','France','England','India','China')
vendor1 <- c(1,1,1,1,1,1,0,0,1,1)
vendor2<-c(0,0,0,0,1,0,0,1,0,1)
vendor3<-c(0,0,0,0,1,0,1,0,0,0)
vendor4<-c(0,0,0,0,1,0,1,1,0,0)
vendor5 <- c(1,0,0,1,0,0,1,0,0,0)
ctable <- rbind(vendor1, vendor2, vendor3,vendor4,
vendor5)
colnames(ctable) <- tourists
# ctable is a matrix at the moment, with the rownames identifying vendors
ctable_df <- data.frame(ctable)
# ctable_df is now a data.frame.
# if you want area as a column in your data.frame (not just row.names)
CTABLE <- data.frame(vendorId= rownames(ctable_df), ctable_df, row.names = NULL)
challenge <-c(sum(CTABLE$USA),sum(CTABLE$Canada),sum(CTABLE$Russia),
sum(CTABLE$Australia),sum(CTABLE$Australia),sum(CTABLE$Spain),sum(CTABLE$France),sum(CTABLE$England),
sum(CTABLE$India),sum(CTABLE$China))
barplot(challenge, names.arg=tourists, main="Countries of visiting Tourists",col=c("brown","green","grey","blue","yellow"))
peak ->c(70,120,100,80,50)
summary(peak)
hist(peak, main='Tourists in peak season')
peak ->c(70,120,100,80,50)
peak<-c(70,120,100,80,50)
summary(peak)
hist(peak, main='Tourists in peak season')
lowtour<-c(20,24,60,18,20)
summary(lowtour)
hist(lowtour, main='Tourists in low season')
library(BiocManager)
library(Biobase)
library(sangeranalyseR)
biocLite("DECIPHER")
install.packages("ape")
install.packages("reshape2")
install.packages("phangorn")
install.packages("stringi")
install.packages("stringr")
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite("Biostrings")
BiocManager::install("Biostrings")
BiocManager::install("Biostrings")
source("https://bioconductor.org/biocLite.R")
biocLite("DECIPHER")
help("Deprecated")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("Biostrings")
BiocManager::install("DECIPHER")
install.packages("devtools")
library(devtools)
BiocManager::install("sangerseqR")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("roblanf/sangeranlayseR")
install_github("roblanf/sangeranalyseR")
library(sangeranalyseR)
#Set our working directory.
setwd("~/MEGAsync/Resume/dmachuve")
#render the site.
rmarkdown::render_site()
#Set our working directory.
setwd("~/MEGAsync/Resume/dmachuve")
#render the site.
rmarkdown::render_site()
#Set our working directory.
setwd("~/MEGAsync/Resume/dmachuve")
#render the site.
rmarkdown::render_site()
